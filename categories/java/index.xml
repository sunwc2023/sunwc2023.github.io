<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Sunwc&#39;s Blog</title>
    <link>https://sunwc2023.github.io/categories/java/</link>
    <description>Recent content in Java on Sunwc&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Fri, 31 Mar 2023 20:12:00 +0800</lastBuildDate><atom:link href="https://sunwc2023.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java - System.in、 System.out, PrintStream, Data Stream(Byte、Character)</title>
      <link>https://sunwc2023.github.io/blog/io/other-stream/</link>
      <pubDate>Fri, 31 Mar 2023 20:12:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/io/other-stream/</guid>
      <description>System類 System.in：標準輸入，默認s從鍵盤輸入；其類別為InputStream System.out：標準輸出，默認從console輸出；其類別為PrintStream，為OutputStream的子類 練習一 System.in(return InputStream 類) 讀取鍵盤輸入的兩種方式 從鍵盤輸入字串，要求將讀取到的整行字串轉成大寫輸出。然後繼續進行輸入操作，直至當輸入“e”或“exit”時，退出程式
public static void main(String[] args) { // 方法一 使用Scanner實現 // Scanner scan = new Scanner(System.</description>
    </item>
    
    <item>
      <title>Java - InputStream, OutputStream &amp; Reader, Writer</title>
      <link>https://sunwc2023.github.io/blog/io/read-write/</link>
      <pubDate>Fri, 31 Mar 2023 19:12:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/io/read-write/</guid>
      <description>流的分類 1.操作資料單位：字節流、字符流
2.資料的流向：輸入流、輸出流
3.流的角色：節點流、處理流
流的體系結構 文件輸入字符流(FileReader)：read() @Test public void fileReaderTest() { FileReader fr = null; try { File file = new File(&amp;#34;hello.</description>
    </item>
    
    <item>
      <title>Java - File</title>
      <link>https://sunwc2023.github.io/blog/io/file/</link>
      <pubDate>Thu, 30 Mar 2023 10:26:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/io/file/</guid>
      <description>File 類的使用 1.File 類的一個物件，代表一個文件或一個文件目錄(俗稱：文件夾)
2.File 類宣告在 java.io package下
3.File 類涉及到關於文件或文件目錄的創建、刪除、重命名、修改時間、取得文件大小等方法，並未涉及到寫入或讀取文件內容的操作。如果需要讀取或寫入文件內容，必須使用IO流來完成</description>
    </item>
    
    <item>
      <title>Java - Collections - 操作 Collection、Map 工具類</title>
      <link>https://sunwc2023.github.io/blog/collection/collections-list-set-map/</link>
      <pubDate>Wed, 29 Mar 2023 14:28:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/collection/collections-list-set-map/</guid>
      <description>Collections 工具類 常用方法 reverse(List) ：反轉 List 中的元素 shuffle(List)：對 List 集合元素進行隨機排序 sort(List)：根據元素的自然順序對指定 List 集合元素按升冪排序 sort(List, Comparator)：根據指定的 Comparator 產生的順序對 List 集合元素進行排序 swap(List, int, int)：將指定 list 集合中的 index i元素 與 index j元素進行交換 Object max(Collection)：根據元素的自然排序，回傳給定集合中的最大元素 Object max(Collection, Comparator)：根據 Comparator 指定的順序，回傳給訂集合中的最大元素 Object min(Collection) Object min(Collection, Comparator) int frequency(Collection, Object)：回傳指定集合中指定元素的出現次數 void copy(List dest, List src)：將 src 中的內容複製到 dest 中 /** * @author sunwc * @create 2023-03-29 下午 03:20 */ public class CollectionsTest { @Test public void testCollections() { List list = new ArrayList(); list.</description>
    </item>
    
    <item>
      <title>Java - Collection(二)</title>
      <link>https://sunwc2023.github.io/blog/collection/map/</link>
      <pubDate>Wed, 29 Mar 2023 08:53:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/collection/map/</guid>
      <description>JDK 1.8 Collection 框架 - interface Map 架構 interface Map：雙列資料，儲存key-value對的資料</description>
    </item>
    
    <item>
      <title>Java - Collection(一)</title>
      <link>https://sunwc2023.github.io/blog/collection/list-set/</link>
      <pubDate>Tue, 28 Mar 2023 13:47:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/collection/list-set/</guid>
      <description>JDK 1.8 Collection 框架 - interface List, interface Set 架構 interface Collection：單列集合，用來儲存一個一個的物件 interface List：儲存有序的、可重複的資料 =&amp;gt; &amp;ldquo;動態&amp;quot;陣列，替換原有的陣列</description>
    </item>
    
    <item>
      <title>Java - Collection - iterator 方法</title>
      <link>https://sunwc2023.github.io/blog/collection/collection-iterator/</link>
      <pubDate>Tue, 28 Mar 2023 12:41:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/collection/collection-iterator/</guid>
      <description>/** * @author sunwc * @create 2023-03-28 上午 09:56 */ public class CollectionTest { @Test public void testCollection() { Collection collection = new ArrayList&amp;lt;&amp;gt;(); Person person = new Person(&amp;#34;Jerry&amp;#34;, 20); collection.</description>
    </item>
    
    <item>
      <title>Java - enum class</title>
      <link>https://sunwc2023.github.io/blog/enum/enum-class/</link>
      <pubDate>Mon, 27 Mar 2023 16:05:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/enum/enum-class/</guid>
      <description>為什麼要使用列舉類？ 當我們在開發中，有一組常數對應不同的狀態來顯示時，就可以考慮使用 enum class
方式一、自定義列舉類 /** * 自定義列舉類 * @author sunwc * @create 2023-03-27 下午 03:53 */ public class Season { // 1.</description>
    </item>
    
    <item>
      <title>Java - interface Comparator vs. interface Comparable</title>
      <link>https://sunwc2023.github.io/blog/compare/comparator-comparable/</link>
      <pubDate>Mon, 27 Mar 2023 11:05:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/compare/comparator-comparable/</guid>
      <description>interface java.lang.Comparable override compartTo() 自然排序 override compareTo(obj) 的規則： 如果當前物件this大於傳入物件obj，則回傳正整數 如果當前物件this小於傳入物件obj，則回傳負整數 如果當前物件this等於傳入物件obj，則回傳0 實現 interface Comparable 的有String, wrapper class, java.</description>
    </item>
    
    <item>
      <title>Java - StringBuffer, StringBuilder</title>
      <link>https://sunwc2023.github.io/blog/string/string-buffer/</link>
      <pubDate>Sun, 26 Mar 2023 15:50:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/string/string-buffer/</guid>
      <description>String：不可變的 CharSequence
StringBuffer：可變的 CharSequence、且thread-safety，所以效率較低
StringBuilder：可變的 CharSequence、非thread-safety，所以效率較高
執行效率：StringBuilder &amp;gt; StringBuffer &amp;gt; String</description>
    </item>
    
    <item>
      <title>Java - 時間相關API</title>
      <link>https://sunwc2023.github.io/blog/datetime/datetime-api/</link>
      <pubDate>Sun, 26 Mar 2023 15:50:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/datetime/datetime-api/</guid>
      <description>JDK 8 以前日期時間API java.lang.System.currentTimeMillis()：回傳(long值)當前時間與1970年1月1日0時0分0秒之間以毫秒為單位的時間差(時間戳)
UTC 統一標準時間 GMT 格林威治標準時間 CST 中央標準時間 java.</description>
    </item>
    
    <item>
      <title>Java - String 不可變的</title>
      <link>https://sunwc2023.github.io/blog/string/unchangeable-string/</link>
      <pubDate>Sat, 25 Mar 2023 15:48:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/string/unchangeable-string/</guid>
      <description>例子 /** * String 代表不可變的CharSequence，簡稱不可變性 * @author sunwc * @create 2023-03-25 下午 02:51 */ public class StringTest { private String str = new String(&amp;#34;good&amp;#34;); private char[] ch = {&amp;#39;t&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;s&amp;#39;,&amp;#39;t&amp;#39;}; private void change(String str, char[] ch) { str = &amp;#34;test ok&amp;#34;; ch[0] = &amp;#39;b&amp;#39;; } public static void main(String[] args) { StringTest stringTest = new StringTest(); stringTest.</description>
    </item>
    
    <item>
      <title>Java -  Thread 執行緒(四) Thread Pool</title>
      <link>https://sunwc2023.github.io/blog/thread/thread-pool/</link>
      <pubDate>Fri, 24 Mar 2023 21:34:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/thread/thread-pool/</guid>
      <description>Thread Pool 特性 背景：經常創建和銷毀、使用量特別大的資源，例如併發情況下的執行緒，對效能影響很大 思路：提前創建 Multi thread，放入 Thread Pool中，使用時直接取得，使用完後放回池中。可以避免頻繁創建與銷毀、實現重複利用。類似生活中大眾交通工具 好處： 提高響應速度(減少了創建新 Thread 的時間) 降低資源消耗(重複利用Thread Pool中的Thread，不需要每次都創建) 便於 Thread 管理 corePoolSize: 核心池的大小 maximumPoolSize: 最大 Thread 數 keepAliveTime: Thread 在沒有任務時最多保持多長時間後會終止 Thread Pool 相關 API JDK 5.</description>
    </item>
    
    <item>
      <title>Java - Thread 執行緒(三) - interface Callable</title>
      <link>https://sunwc2023.github.io/blog/thread/implements-callable/</link>
      <pubDate>Fri, 24 Mar 2023 20:44:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/thread/implements-callable/</guid>
      <description>JDK 5.0 新增
新執行緒的創建 (Multi-threading) - 實現 interface Callable 之步驟 1.</description>
    </item>
    
    <item>
      <title>Java - 執行緒 交互輸出1-50的數字</title>
      <link>https://sunwc2023.github.io/blog/thread/wait-notify/</link>
      <pubDate>Fri, 24 Mar 2023 15:20:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/thread/wait-notify/</guid>
      <description>執行緒通訊 Multi-threading 中 如何讓執行緒可以交互執行 會涉及到三個方法：
java.lang.Object.wait()：一但執行此方法，當前執行緒就會進入阻塞狀態，並釋放同步鎖 java.lang.Object.notify()：一但執行此方法，就會喚醒正在wait()中的執行緒。如果有多個執行緒wait()中，就先喚醒優先級較高的 java.lang.Object.notifyAll()：一但執行此方法，就會喚醒所有wait()中的執行緒 wait(),notify(),notifyAll()使用前提 這三個方法只能使用在synchronized修飾的區塊 或 同步方法中 這三個方法的調用者必須是同步鎖this；若調用此三個方法的物件與同步鎖不一致，會出現IllegalMonitorStateException 例子 /** * @author sunwc * @create 2023-03-24 下午 03:02 */ public class PrintNumberInteraction { public static void main(String[] args) { Number number = new Number(); Thread t1 = new Thread(number); Thread t2 = new Thread(number); t1.</description>
    </item>
    
    <item>
      <title>Java - Lock - 解決執行緒不安全</title>
      <link>https://sunwc2023.github.io/blog/thread/lock-reentrantlock/</link>
      <pubDate>Fri, 24 Mar 2023 12:04:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/thread/lock-reentrantlock/</guid>
      <description>為什麼要用鎖(Lock)？ 鎖 相對於 synchronized 機制，是更加靈活的，它一樣能夠解決執行緒不安全的問題；
不同點在於：synchronized機制在執行完相應的區塊後，會自動釋放同步鎖；而Lock就需要手動啟動同步 以及 手動結束同步 java.util.concurrent.locks.ReentrantLock; 是JDK 5.</description>
    </item>
    
    <item>
      <title>Java - Thread 的 Deadlock</title>
      <link>https://sunwc2023.github.io/blog/thread/thread-deadlock/</link>
      <pubDate>Thu, 23 Mar 2023 15:37:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/thread/thread-deadlock/</guid>
      <description>什麼是死鎖？ 當不同執行緒分別占用對方需要的同步資源不放棄，都在等待對方放棄自己需要的同步資源，就形成了執行緒的死鎖
死鎖出現後的現象？ 出現死鎖後，不會出現例外，也不會有提示，只是所有執行緒都處於阻塞的狀態；因此我們在使用 synchronized 的時候，要避免死鎖的情況發生
如何避免死鎖？ 盡量減少同步資源的宣告，例如 有 static 關鍵字 避免嵌套synchronized(同步鎖){} 例子 /** * 演示執行緒死鎖問題 * @author sunwc * @create 2023-03-24 上午 10:49 */ public class DeadlockTest { public static void main(String[] args) { // 1.</description>
    </item>
    
    <item>
      <title>Java - Thread 的 生命週期</title>
      <link>https://sunwc2023.github.io/blog/thread/thread-lifecycle/</link>
      <pubDate>Thu, 23 Mar 2023 15:37:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/thread/thread-lifecycle/</guid>
      <description>JDK中用Thread.State類定義了執行緒的幾種狀態如下：
public enum State { NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED } Java語言使用 Thread 類及其子類別的物件來表示執行緒，在它一個完整的生命週期中通常要經歷如下五個狀態：</description>
    </item>
    
    <item>
      <title>Java - Thread 執行緒(二) - interface Runnable</title>
      <link>https://sunwc2023.github.io/blog/thread/implements-runnable/</link>
      <pubDate>Thu, 23 Mar 2023 15:35:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/thread/implements-runnable/</guid>
      <description>有關創建多執行緒 (Multi-threading) 的方式 - 繼承 Thread 類，可以參考我的另一篇文章 Java - Thread 執行緒(一)</description>
    </item>
    
    <item>
      <title>Java - Thread 執行緒(一)</title>
      <link>https://sunwc2023.github.io/blog/thread/thread/</link>
      <pubDate>Thu, 23 Mar 2023 09:00:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/thread/thread/</guid>
      <description>什麼是Process？ 通常一個應用程序執行起來，就會在記憶體加載一個 Process ，對應到工作管理員(上圖)來看，一個 Process 就會對應到一個 PID (Process Identification)； 而一個 Process 會有 Multi-threading (Thread)，代表這個應用程序支持我們能夠使用它 同時在裡面做很多事情</description>
    </item>
    
    <item>
      <title>Java - 例外處理 (Exception)</title>
      <link>https://sunwc2023.github.io/blog/exception/exception-example/</link>
      <pubDate>Wed, 22 Mar 2023 14:09:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/exception/exception-example/</guid>
      <description>Error：此錯誤是 Java虛擬機 (JVM) 無法解決的嚴重問題。例如 JVM系統內部錯誤、資源耗盡等嚴重情況 java.lang.StackOverflowError堆疊溢出 =&amp;gt; 例如 recursion終止條件沒寫好 java.</description>
    </item>
    
    <item>
      <title>Java - interface</title>
      <link>https://sunwc2023.github.io/blog/abstract/interface/</link>
      <pubDate>Wed, 22 Mar 2023 10:26:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/abstract/interface/</guid>
      <description>interface 特性 interface 可以定義全局常量、抽象方法、靜態方法與默認方法
interface 沒有 constructor，因此也不可以實例化
Java類可以 implements 多個 interface ，彌補了 Java 單繼承的侷限性 (先寫繼承後寫實現)</description>
    </item>
    
    <item>
      <title>Java - 抽象類別 抽象方法</title>
      <link>https://sunwc2023.github.io/blog/abstract/abstract/</link>
      <pubDate>Wed, 22 Mar 2023 09:12:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/abstract/abstract/</guid>
      <description> 有關的例子，可以參考我的另一篇文章 Java - 多型 繼承
abstract的特性 abstract 關鍵字只可以修飾 非final 的類別、 非private、非static、非final 的方法 抽象類別不可以實例化，抽象類別一定有constructor，以便讓子類別實例化的時候可以進行調用 抽象方法只有方法的宣告、沒有方法體 總結： 包含 抽象方法 的類別，一定是抽象類別；反之，抽象類別中可以無抽象方法 若子類別覆寫父類別的所有抽象方法後，此子類別可以實例化；若子類別沒有覆寫父類的所有抽象方法，則此子類別也是一個抽象類別，需要使用 abstract 修飾 </description>
    </item>
    
    <item>
      <title>Java - static 關鍵字 vs. 單例 (Singleton) 設計模式</title>
      <link>https://sunwc2023.github.io/blog/static/static-example/</link>
      <pubDate>Tue, 21 Mar 2023 17:55:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/static/static-example/</guid>
      <description>static 關鍵字： 有些時候，我們希望「某些特定資料在記憶體中只有一份」，且這份資料是大家共享的，而不會隨著物件而不同的，例如：存款利率、最低存款金額、工具類
access 靜態變數 實例變數類別 Yes No物件 Yes Yesstatic 特性： static 可以修飾 屬性、方法、程式區塊、內部類 靜態程式區塊 (static block)：(用於類別初始化) 隨著類別加載時，就會執行，且只會執行一次 static { System.</description>
    </item>
    
    <item>
      <title>Java - equals 方法</title>
      <link>https://sunwc2023.github.io/blog/compare/equals/</link>
      <pubDate>Tue, 21 Mar 2023 14:17:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/compare/equals/</guid>
      <description>Object 的 euqals() 與 == 作用是相同的 是比較兩個物件的記憶體地址是否相同
public boolean equals(Object obj) { return (this == obj); } String, java.</description>
    </item>
    
    <item>
      <title>Java - final, finally, finalize 的區別</title>
      <link>https://sunwc2023.github.io/blog/final/final-finally-finalize/</link>
      <pubDate>Tue, 21 Mar 2023 14:11:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/final/final-finally-finalize/</guid>
      <description>finalize 方法 一般來說，在物件被回收之前會先存取 物件.finalize()，但是我們不要主動去調finalize()，gc回收機制會主動去調 物件.finalize()
final 關鍵字 * final 修飾類別： 代表本類別就不能被繼承，例如 String, System, StringBuffer 類別* final 修飾方法： 代表本方法不能被覆寫 (Override)，例如Object類別的getClass()* final 修飾變數： 代表本變數為常量，不能做修改；可以考慮指定值的位置有：顯示初始化、non-static-block 中初始化、constructor 中初始化```javapublic class SingletonTest2 {final int WIDTH;final int HEIGHT;final double PI;// non-static-block{PI = Math.</description>
    </item>
    
    <item>
      <title>Java - OOP 物件導向特性</title>
      <link>https://sunwc2023.github.io/blog/abstract/oop/</link>
      <pubDate>Mon, 20 Mar 2023 17:35:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/abstract/oop/</guid>
      <description>encapsulation封裝性： Java提供了4種存取修飾符private ,不寫(default), protected , public來修飾類別及類別的內部結構，體現類別及內部結構在被存取時的可見性(visible)的大小
inheritance繼承性： 減少程式碼的冗餘，也方便功能的擴展，先有一個類別(子)去繼承另一個類別(父)，而有了父類與子類的關係，子類可以使用父類的所有功能，且子類還可以在父類的基礎之上擴展其他功能 =&amp;gt; is-a 關係(子類 is a 父類)</description>
    </item>
    
    <item>
      <title>Java - Math.random 使用</title>
      <link>https://sunwc2023.github.io/blog/exmaple/math-random/</link>
      <pubDate>Fri, 17 Mar 2023 11:37:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/exmaple/math-random/</guid>
      <description>原始random區間為包含0.0且不包含1.0 =&amp;gt; [0.0,1.0)
我們可以透過公式Math.random*(b-a+1)+a 取得區間[a,b)的一個數字
例子 public static void main(String[] args) { // 原始random區間為包含0.</description>
    </item>
    
    <item>
      <title>Java - ThreadLocal 類的使用</title>
      <link>https://sunwc2023.github.io/blog/thread/thread-local/</link>
      <pubDate>Wed, 15 Mar 2023 13:01:00 +0800</pubDate>
      
      <guid>https://sunwc2023.github.io/blog/thread/thread-local/</guid>
      <description>有關在實際工作上使用到 ThreadLocal 的例子，可以參考我的另一篇文章 Java - ThreadLocal 實際應用
ThreadLocal 實現原理 ThreadLocal 從字面義直翻，就是執行緒 (Thread) 的局部變數，是每一個執行緒所單獨持有，其他執行緒不能對其進行存取</description>
    </item>
    
  </channel>
</rss>
